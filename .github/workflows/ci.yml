name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Use GitHub-hosted PostgreSQL instead of Docker service
    # This avoids Docker-related issues in the GitHub Actions environment
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test database for CI
      run: |
        # Temporarily modify the Prisma schema to use SQLite for testing
        echo "Setting up SQLite for CI testing"
        # Backup the original schema
        cp prisma/schema.prisma prisma/schema.prisma.backup
        # Update the schema to use SQLite
        sed -i 's/provider = "postgresql"/provider = "sqlite"/' prisma/schema.prisma
        # Generate Prisma client with the modified schema
        npx prisma generate
        # Create SQLite database
        touch prisma/test.db
    
    # Skip linting for now as we're focusing on tests
    # - name: Run linting
    #   run: npm run lint || echo "No linting configured"
    
    - name: Run backend tests
      env:
        # Use SQLite for testing
        DATABASE_URL: "file:./prisma/test.db"
        NODE_ENV: "test"
      run: npm run test:backend
    
    - name: Run frontend tests
      run: npm run test:frontend
    
    - name: Generate test coverage report
      env:
        # Use SQLite for testing
        DATABASE_URL: "file:./prisma/test.db"
        NODE_ENV: "test"
      run: npm run test:coverage
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.node-version }}
        path: coverage/
  
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_id }}
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
    
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: 'Deploy from GitHub Actions'
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      # Note: You need to add NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID secrets in your GitHub repository settings
      timeout-minutes: 1
